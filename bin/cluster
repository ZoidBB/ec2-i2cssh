#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'aws-sdk'

options = {
  'user'           => 'ec2-user',
  'use_private_ip' => false,
  'region'         => 'us-east-1'
}

OptionParser.new do |opts|
  opts.banner = "Usage: cluster [-t TAGS] [-l USER] [-k KEY -s SECRET] [-r region]"

  opts.on("-l", "--login [USER]", "Log in with this user (default: #{options['user']}") do |opt|
    options['user'] = opt
  end

  opts.on("-t", "--tags [TAGS]", "a 'space' sparated key value pair of tags and values (i.e. role=web,database environment=dev)") do |opt|
    options['tags'] = opt.split(' ')
  end

  opts.on("-r", "--region [REGION]", "AWS region") do |opt|
    options['region'] = opt
  end

  opts.on("-p", "--use-private-ip", "Use private IP (default #{options['use_private_ip']})") do
    options['use_private_ip'] = true
  end
end.parse!

AWS.config(:region => options['region'])

ec2 = AWS::EC2.new

# filter instances based on tags
instances = ec2.instances
options['tags'].each do |tag|
  tag = tag.split('=')
  key = tag[0]
  values = tag[1].split(',')
  instances = instances.tagged(key).tagged_values(values)
end

# get dns entries for cssh
dns = nil
if options['use_private_ip']
  dns = instances.map{|instance| instance.private_ip_address}
else
  dns = instances.map{|instance| instance.dns_name}
end

if dns.length == 0
  puts "No instances matched #{options['tags']}"
  exit
end

cssh = (/darwin/ =~ RUBY_PLATFORM) ? 'csshX' : 'cssh'

cmd = "#{cssh} -l #{options['user']} #{dns.join ' '}"
puts "Connecting to #{dns.length} instances"
puts cmd
exec cmd
